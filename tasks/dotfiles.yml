---
- name: Verificar se o repositório de dotfiles já existe
  stat:
    path: "{{ dotfiles_bare_dir }}"
  register: dotfiles_repo_stat
  become: yes
  become_user: tg

- name: Copiar SSH_AUTH_SOCK do usuário tg para ansible
  ansible.builtin.command:
    cmd: export SSH_AUTH_SOCK={{ lookup('env', 'SSH_AUTH_SOCK') }}
  become: true
  become_user: ansible
  when: ansible_env.SSH_AUTH_SOCK is defined
  
- name: Ajustar permissões do SSH_AUTH_SOCK para o usuário ansible
  ansible.builtin.command:
    cmd: setfacl -m u:ansible:rwx {{ lookup('env', 'SSH_AUTH_SOCK') }}
  become: true
  when: ansible_env.SSH_AUTH_SOCK is defined
  ignore_errors: true  # Ignora se houver erros ao acessar o socket

- name: Criar link simbólico para .git
  file:
    src: "{{ dotfiles_bare_dir }}"
    dest: "{{ dotfiles_home_dir }}.git"
    state: link
    force: yes
  become: yes
  become_user: tg

- name: Verificar se o agente SSH está rodando
  shell: echo $SSH_AUTH_SOCK
  register: ssh_agent_running
  changed_when: false
  failed_when: false
  become: yes
  become_user: tg
  environment:
    SSH_AUTH_SOCK: "{{ ansible_env.SSH_AUTH_SOCK | default('') }}"

- name: Iniciar o agente SSH se não estiver rodando
  shell: |
    eval "$(ssh-agent -s)"
    export SSH_AUTH_SOCK=$(ls /tmp/ssh-*/agent.*)
    ssh-add /home/tg/.ssh/id_ed25519
  environment:
    SSH_AUTH_SOCK: "{{ lookup('env', 'SSH_AUTH_SOCK') }}"
  when: not ssh_agent_running.stdout
  register: ssh_agent_start
  failed_when: false
  become: yes
  become_user: tg

- name: Verificar se a chave SSH está carregada
  shell: ssh-add -l
  register: ssh_keys
  changed_when: false
  failed_when: false
  become: yes
  become_user: tg
  environment:
    SSH_AUTH_SOCK: "{{ lookup('env', 'SSH_AUTH_SOCK') }}"

# - name: Exibir as chaves SSH carregadas
#   debug:
#     msg: "{{ ssh_keys.stdout_lines }}"
#   become: yes
#   become_user: tg
#   environment:
#     SSH_AUTH_SOCK: "{{ ansible_env.SSH_AUTH_SOCK | default('') }}"

- name: Falhar se nenhuma chave SSH estiver carregada
  fail:
    msg: "Nenhuma chave SSH está carregada. Por favor, adicione uma chave SSH antes de continuar."
  when: ssh_keys.rc != 0
  become: yes
  become_user: tg
  environment:
    SSH_AUTH_SOCK: "{{ ansible_env.SSH_AUTH_SOCK | default('') }}"

# - debug:
#     msg: "{{ dotfiles_bare_dir }}"

- name: Garantir que o diretório ~/.ssh e o arquivo ~/.ssh/config existem com as permissões corretas
  file:
    path: "{{ item.path }}"
    mode: "{{ item.mode }}"
    state: "{{ item.state }}"
    owner: "{{ ansible_user_id }}"
  loop:
    - { path: "{{ ansible_env.HOME }}/.ssh", mode: '0700', state: 'directory' }
    - { path: "{{ ansible_env.HOME }}/.ssh/config", mode: '0600', state: 'touch' }

- name: Clonar ou atualizar repositório bare para dotfiles
  git:
    repo: "{{ dotfiles_repo }}"
    version: master
    bare: yes
    dest: "{{ dotfiles_bare_dir }}"
    accept_hostkey: yes
    key_file: "{{ ansible_ssh_private_key_file }}"
    update: yes
    track_submodules: yes
    recursive: yes
    force: yes
  register: git_clone
  become: yes
  become_user: tg
  environment:
    SSH_AUTH_SOCK: "{{ ansible_env.SSH_AUTH_SOCK | default('') }}"
  when: ssh_keys.rc == 0

# Adiciona o segundo usuário ao grupo do usuário principal (se necessário)
- name: Adicionar usuário secundário ao grupo do usuário principal
  user:
    name: ansible
    group: tg
    append: yes
  become: yes

- name: Conceder permissão de leitura para o grupo na pasta do usuário principal
  file:
    path: "{{ dotfiles_bare_dir }}"
    owner: tg
    group: tg
    mode: '0750'
    recurse: yes
  become: yes

# - name: Garantir permissões de leitura para ansible no repositório de dotfiles
#   acl:
#     path: "{{ dotfiles_bare_dir }}"
#     entity: ansible
#     etype: user
#     permissions: rx
#     state: present
#     recursive: yes
#   become: yes

# - name: Garantir que o diretório de dotfiles é considerado seguro pelo Git para o usuário ansible
#   command: git config --global --add safe.directory /home/tg/.dotfiles-bare
#   become: yes
#   become_user: ansible
#   ignore_errors: yes  # Ignorar erros se o diretório já estiver configurado

# - name: Garantir permissões corretas para o repositório bare
#   file:
#     path: "{{ dotfiles_bare_dir }}"
#     owner: tg
#     group: ansible
#     mode: '0755'
#     recurse: yes
#   become: yes
#   # when: git_clone.changed

# - name: Debug dotfiles_repo_stat
#   debug:
#     var: dotfiles_repo_stat

- name: Verificar se existem mudanças não comitadas
  command: git --git-dir={{ dotfiles_bare_dir }} --work-tree={{ dotfiles_home_dir }} status --porcelain
  become: yes
  become_user: tg
  register: git_status
  changed_when: false
  when: dotfiles_repo_stat.stat.exists == False

# - name: Debug git status
#   debug:
#     var: git_status

# - name: Verificar se existe saída no git_status
#   debug:
#     msg: "stdout está presente: {{ 'stdout' in git_status }}"

- name: Fazer stash se houver mudanças não comitadas
  command: git --git-dir={{ dotfiles_bare_dir }} --work-tree={{ dotfiles_home_dir }} stash
  become: yes
  become_user: tg
  when: "'stdout' in git_status and git_status.stdout | length > 0 and dotfiles_repo_stat.stat.exists == False"

- name: Sobrescrever dotfiles padrão do sistema no primeiro uso
  command: git --git-dir={{ dotfiles_bare_dir }} --work-tree={{ dotfiles_home_dir }} reset --hard
  become: yes
  become_user: tg
  when: git_clone.changed and dotfiles_repo_stat.stat.exists == False

- name: Configurar Git para não mostrar arquivos não rastreados
  git_config:
    name: status.showUntrackedFiles
    scope: local
    repo: "{{ dotfiles_bare_dir }}"
    value: 'no'
  become: yes
  become_user: tg

- name: Habilitar sparse checkout no Git
  git_config:
    name: core.sparseCheckout
    scope: local
    repo: "{{ dotfiles_bare_dir }}"
    value: 'true'
  become: yes
  become_user: tg

# - name: Executar script de provisionamento se houver mudanças
#   command: /usr/local/bin/provision.sh
#   when: git_clone.changed
#   ignore_errors: yes

# sudo chsh tg -s /bin/zsh