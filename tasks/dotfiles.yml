---
- name: Verificar se as variáveis necessárias estão definidas
  assert:
    that:
      - dotfiles_bare_dir is defined
      - dotfiles_home_dir is defined
      - dotfiles_repo is defined
    fail_msg: "Variáveis necessárias não estão definidas"
  tags:
    - always

- name: Verificar se oh-my-zsh está instalado
  stat:
    path: "{{ dotfiles_home_dir }}/.oh-my-zsh"
  register: omz_stat

- name: Instalar oh-my-zsh
  shell: |
    curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh
  args:
    creates: "{{ dotfiles_home_dir }}/.oh-my-zsh"
  become: yes
  become_user: "tg"
  when: not omz_stat.stat.exists
  environment:
    RUNZSH: "no"
    KEEP_ZSHRC: "yes"
  tags:
    - dotfiles
    - zsh

- name: Verificar se o repositório dotfiles já existe
  stat:
    path: "{{ dotfiles_bare_dir }}"
  register: dotfiles_repo_stat

- name: Criar link simbólico para .git
  file:
    src: "{{ dotfiles_bare_dir }}"
    dest: "{{ dotfiles_home_dir }}.git"
    state: link
    force: yes
    follow: no
  become: yes
  become_user: tg

# - name: Verificar se o agente SSH está rodando
#   shell: echo $SSH_AUTH_SOCK
#   register: ssh_agent_running
#   changed_when: false
#   failed_when: false
#   become: yes
#   become_user: tg
#   environment:
#     SSH_AUTH_SOCK: "{{ ansible_env.SSH_AUTH_SOCK | default('') }}"

# - name: Iniciar o agente SSH se não estiver rodando
#   shell: |
#     eval "$(ssh-agent -s)"
#     export SSH_AUTH_SOCK=$(ls /tmp/ssh-*/agent.*)
#     ssh-add /home/tg/.ssh/id_ed25519
#   environment:
#     SSH_AUTH_SOCK: "{{ lookup('env', 'SSH_AUTH_SOCK') }}"
#   when: not ssh_agent_running.stdout
#   register: ssh_agent_start
#   failed_when: false
#   become: yes
#   become_user: tg

# - name: Verificar se a chave SSH está carregada
#   shell: ssh-add -l
#   register: ssh_keys
#   changed_when: false
#   failed_when: false
#   become: yes
#   become_user: tg
#   environment:
#     SSH_AUTH_SOCK: "{{ lookup('env', 'SSH_AUTH_SOCK') }}"

# - name: Exibir as chaves SSH carregadas
#   debug:
#     msg: "{{ ssh_keys.stdout_lines }}"
#   become: yes
#   become_user: tg
#   environment:
#     SSH_AUTH_SOCK: "{{ ansible_env.SSH_AUTH_SOCK | default('') }}"

# - name: Falhar se nenhuma chave SSH estiver carregada
#   fail:
#     msg: "Nenhuma chave SSH está carregada. Por favor, adicione uma chave SSH antes de continuar."
#   when: ssh_keys.rc != 0
#   become: yes
#   become_user: tg
#   environment:
#     SSH_AUTH_SOCK: "{{ ansible_env.SSH_AUTH_SOCK | default('') }}"

- debug:
    msg: "Valor tg de ansible_env.SSH_AUTH_SOCK: {{ ansible_env.SSH_AUTH_SOCK | default('') }}"
  become: true
  become_user: tg

- debug:
    msg: "Valor tg de env SSH_AUTH_SOCK: {{ lookup('env', 'SSH_AUTH_SOCK') }}"
  become: true
  become_user: tg

- debug:
    msg: "Valor de ansible_env.SSH_AUTH_SOCK: {{ ansible_env.SSH_AUTH_SOCK | default('') }}"
  become: true
  become_user: ansible

- debug:
    msg: "Valor de env SSH_AUTH_SOCK: {{ lookup('env', 'SSH_AUTH_SOCK') }}"
  become: true
  become_user: ansible

- name: Verificar se existem mudanças não comitadas
  command: git --git-dir={{ dotfiles_bare_dir }} --work-tree={{ dotfiles_home_dir }} status --porcelain
  become: yes
  become_user: "tg"
  register: git_status
  changed_when: false
  failed_when: false
  when: dotfiles_repo_stat.stat.exists

- name: Clonar ou atualizar repositório bare para dotfiles
  git:
    repo: "{{ dotfiles_repo }}"
    version: main
    bare: yes
    dest: "{{ dotfiles_bare_dir }}"
    accept_hostkey: yes
    key_file: "{{ ansible_ssh_private_key_file }}"
    update: yes
    track_submodules: yes
    recursive: yes
  register: git_clone
  become: yes
  become_user: "tg"
  tags: 
    - dotfiles
    - sync

- name: Atualizar submódulos Git
  command: git --git-dir={{ dotfiles_bare_dir }} --work-tree={{ dotfiles_home_dir }} submodule update --init --recursive
  become: yes
  become_user: "tg"
  when: git_clone.changed
  tags:
    - dotfiles
    - sync

- name: Fazer stash se houver mudanças não comitadas
  command: git --git-dir={{ dotfiles_bare_dir }} --work-tree={{ dotfiles_home_dir }} stash
  become: yes
  become_user: "tg"
  when: 
    - git_status is succeeded
    - git_status.stdout is defined
    - git_status.stdout | length > 0
  tags:
    - dotfiles
    - backup

- name: Sobrescrever dotfiles padrão do sistema no primeiro uso
  command: git --git-dir={{ dotfiles_bare_dir }} --work-tree={{ dotfiles_home_dir }} reset --hard
  become: yes
  become_user: "tg"
  when: 
    - git_clone.changed 
    - not dotfiles_repo_stat.stat.exists
  tags:
    - dotfiles
    - sync

# Adiciona o segundo usuário ao grupo do usuário principal (se necessário)
# - name: Adicionar usuário secundário ao grupo do usuário principal
#   user:
#     name: ansible
#     group: tg
#     append: yes
#   become: yes

# - name: Conceder permissão de leitura para o grupo na pasta do usuário principal
#   file:
#     path: "{{ dotfiles_bare_dir }}"
#     owner: tg
#     group: tg
#     mode: '0750'
#     recurse: yes
#   become: yes

# - name: Garantir permissões de leitura para ansible no repositório de dotfiles
#   acl:
#     path: "{{ dotfiles_bare_dir }}"
#     entity: ansible
#     etype: user
#     permissions: rx
#     state: present
#     recursive: yes
#   become: yes

# - name: Garantir que o diretório de dotfiles é considerado seguro pelo Git para o usuário ansible
#   command: git config --global --add safe.directory /home/tg/.dotfiles-bare
#   become: yes
#   become_user: ansible
#   ignore_errors: yes  # Ignorar erros se o diretório já estiver configurado

# - name: Garantir permissões corretas para o repositório bare
#   file:
#     path: "{{ dotfiles_bare_dir }}"
#     owner: tg
#     group: ansible
#     mode: '0755'
#     recurse: yes
#   become: yes
#   # when: git_clone.changed

# - name: Debug dotfiles_repo_stat
#   debug:
#     var: dotfiles_repo_stat


# - name: Debug git status
#   debug:
#     var: git_status

# - name: Verificar se existe saída no git_status
#   debug:
#     msg: "stdout está presente: {{ 'stdout' in git_status }}"

- name: Configurar Git para não mostrar arquivos não rastreados
  git_config:
    name: status.showUntrackedFiles
    scope: local
    repo: "{{ dotfiles_bare_dir }}"
    value: 'no'
  become: yes
  become_user: tg

- name: Habilitar sparse checkout no Git
  git_config:
    name: core.sparseCheckout
    scope: local
    repo: "{{ dotfiles_bare_dir }}"
    value: 'true'
  become: yes
  become_user: tg

# - name: Executar script de provisionamento se houver mudanças
#   command: /usr/local/bin/provision.sh
#   when: git_clone.changed
#   ignore_errors: yes

# sudo chsh tg -s /bin/zsh
