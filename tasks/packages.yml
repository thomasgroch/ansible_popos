---
# - name: Adicionar repositório ao apt
#   apt_repository:
#     repo: ppa:
#     state: present

- name: Aguardar até que o bloqueio do APT seja liberado
  shell: while fuser /var/lib/dpkg/lock >/dev/null 2>&1 || fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do sleep 1; done

- name: Install packages
  vars:
    packages: "{{ lookup('file', 'packages.txt').splitlines() | select('match', '^[^#]') | list }}"
  package:
    name: "{{ item }}"
    update_cache: yes
  with_items: "{{ packages }}"
  when: item != ""
  register: apt_result
  retries: 5
  delay: 10
  until: apt_result is succeeded

- name: Adicionar repositório Flathub
  command: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  args:
    creates: /var/lib/flatpak/repo/flathub

- name: Instalar Moonlight via Flatpak
  flatpak:
    name: com.moonlight_stream.Moonlight
    state: present
    remote: flathub

# - name: Definir PATH para incluir diretórios do Flatpak para que Ansible consiga localizar os binários do Flatpak durante a execução
#   environment:
#     PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin:/bin:/snap/bin:/var/lib/flatpak/exports/bin"

- name: Get latest lazygit version
  shell: |
    curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*'
  register: lazygit_version

- name: Download lazygit tarball
  shell: |
    curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_{{ lazygit_version.stdout }}_Linux_x86_64.tar.gz"
  args:
    creates: lazygit.tar.gz

- name: Extract lazygit
  shell: |
    tar xf lazygit.tar.gz lazygit
  args:
    creates: lazygit

- name: Install lazygit
  become: yes
  shell: |
    install lazygit /usr/local/bin

# - name: Check if Go is installed
#   command: go version
#   register: go_installed
#   ignore_errors: yes

# - name: Download Go archive
#   get_url:
#     url: https://storage.googleapis.com/golang/go1.4.linux-amd64.tar.gz
#     dest: /tmp/go.tar.gz
#   when: go_installed.rc != 0  # Proceed only if Go is not installed

# - name: Extract Go to /usr/local
#   unarchive:
#     src: /tmp/go.tar.gz
#     dest: /usr/local
#     remote_src: yes
#   when: go_installed.rc != 0  # Only extract if Go was just downloaded

# - name: Clean up Go archive
#   file:
#     path: /tmp/go.tar.gz
#     state: absent
#   when: go_installed.rc != 0  # Only clean up if Go was downloaded

# - name: Update font cache
#   command: fc-cache -fv
