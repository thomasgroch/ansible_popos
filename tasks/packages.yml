---
- name: Adicionar repositório ao apt
  apt_repository:
    repo: ppa:linuxuprising/guake
    state: present

- name: Aguardar até que o bloqueio do APT seja liberado
  shell: while fuser /var/lib/dpkg/lock >/dev/null 2>&1 || fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do sleep 1; done

- name: Instalar pacotes
  vars:
    packages: "{{ lookup('file', 'packages.txt').splitlines() | select('match', '^[^#]') | reject('match', '^$') | list }}"
  package:
    name: "{{ packages }}"
    update_cache: yes
    state: present
  register: apt_result
  retries: 5
  delay: 10
  until: apt_result is succeeded

- name: Adicionar repositório Flathub
  command: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  args:
    creates: /var/lib/flatpak/repo/flathub

- name: Instalar Moonlight via Flatpak
  flatpak:
    name: com.moonlight_stream.Moonlight
    state: present
    remote: flathub

- name: Obter a versão mais recente do lazygit
  shell: |
    curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*'
  register: lazygit_version

- name: Baixar tarball do lazygit
  shell: |
    curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_{{ lazygit_version.stdout }}_Linux_x86_64.tar.gz"
  args:
    creates: lazygit.tar.gz

- name: Extrair lazygit
  shell: |
    tar xf lazygit.tar.gz lazygit
  args:
    creates: lazygit

- name: Instalar lazygit
  become: yes
  shell: |
    install lazygit /usr/local/bin
    
# - name: Check if Go is installed
#   command: go version
#   register: go_installed
#   ignore_errors: yes

# - name: Download Go archive
#   get_url:
#     url: https://storage.googleapis.com/golang/go1.4.linux-amd64.tar.gz
#     dest: /tmp/go.tar.gz
#   when: go_installed.rc != 0  # Proceed only if Go is not installed

# - name: Extract Go to /usr/local
#   unarchive:
#     src: /tmp/go.tar.gz
#     dest: /usr/local
#     remote_src: yes
#   when: go_installed.rc != 0  # Only extract if Go was just downloaded

# - name: Clean up Go archive
#   file:
#     path: /tmp/go.tar.gz
#     state: absent
#   when: go_installed.rc != 0  # Only clean up if Go was downloaded

# - name: Update font cache
#   command: fc-cache -fv

- name: Instalar Snaps
  vars:
    snaps: "{{ lookup('file', 'packages_snaps.txt').splitlines() | select('match', '^[^#]') | reject('match', '^$') | list }}"
  ansible.builtin.command: sudo snap install "{{ item }}"
  become: yes
  loop: "{{ snaps }}"
  register: snap_install_result
  retries: 5
  delay: 10
  until: snap_install_result is succeeded

- name: Join ZeroTier network
  ansible.builtin.command:
    cmd: sudo zerotier-cli join abfd31bd47bb29b7
  become: yes
  when: snap_install_result.results | map(attribute='item') | select('search', 'zerotier') | list | length > 0



- name: Verificar se o Sunshine está instalado como um serviço ativo
  ansible.builtin.shell: |
    export XDG_RUNTIME_DIR="/run/user/$(id -u tg)"
    export DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus"
    systemctl --user is-active sunshine
  become_user: "tg"
  register: sunshine_service_status
  failed_when: sunshine_service_status.rc != 0 and sunshine_service_status.rc != 3
  changed_when: false

- name: Definir variável se o Sunshine está instalado e ativo
  set_fact:
    sunshine_installed: "{{ sunshine_service_status.rc == 0 }}"

- name: Baixar o Sunshine AppImage
  become_user: "tg"
  ansible.builtin.get_url:
    url: "https://github.com/LizardByte/Sunshine/releases/latest/download/sunshine.AppImage"
    dest: "~/sunshine.AppImage"
    mode: "0755"
  when: not sunshine_installed

- name: Configurar permissão para uinput
  become_user: "tg"
  ansible.builtin.copy:
    content: 'KERNEL=="uinput", SUBSYSTEM=="misc", OPTIONS+="static_node=uinput", TAG+="uaccess"'
    dest: "/etc/udev/rules.d/60-sunshine.rules"
  when: not sunshine_installed

- name: Reload udev rules
  become: yes
  ansible.builtin.shell: |
    udevadm control --reload-rules
    udevadm trigger
    modprobe uinput
  when: not sunshine_installed

- name: Configurar permissão para KMS Capture (Wayland)
  become: yes
  ansible.builtin.command: "setcap cap_sys_admin+p ~/sunshine.AppImage"
  when: not sunshine_installed

- name: Criar diretório para o serviço systemd de usuário
  become_user: "tg"
  ansible.builtin.file:
    path: "~/.config/systemd/user"
    state: directory
    mode: "0755"

- name: Criar serviço systemd para Sunshine
  become_user: "tg"
  ansible.builtin.copy:
    dest: "~/.config/systemd/user/sunshine.service"
    content: |
      [Unit]
      Description=Sunshine self-hosted game stream host for Moonlight
      After=gnome-session-wayland@gnome.target
      StartLimitIntervalSec=500
      StartLimitBurst=5

      [Service]
      ExecStart=/home/tg/sunshine.AppImage
      Restart=on-failure
      RestartSec=5s

      [Install]
      WantedBy=graphical-session.target
    mode: "0644"
  when: not sunshine_installed

- name: Habilitar o serviço Sunshine para iniciar com o sistema
  become_user: "tg"
  ansible.builtin.shell: |
    export XDG_RUNTIME_DIR="/run/user/$(id -u)"
    export DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus"
    systemctl --user enable sunshine
  when: not sunshine_installed

- name: Iniciar o serviço Sunshine
  become_user: "tg"
  ansible.builtin.shell: |
    export XDG_RUNTIME_DIR="/run/user/$(id -u)"
    export DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus"
    systemctl --user start sunshine
  #when: not sunshine_installed and ansible_check_mode == false