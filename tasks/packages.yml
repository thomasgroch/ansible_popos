---
- name: Adicionar repositório ao apt
  apt_repository:
    repo: ppa:linuxuprising/guake
    state: present

- name: Aguardar até que o bloqueio do APT seja liberado
  shell: while fuser /var/lib/dpkg/lock >/dev/null 2>&1 || fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do sleep 1; done

- name: Fix GPG directory permissions to prevent warnings
  file:
    path: "/home/tg/.gnupg"
    mode: '0700'
    recurse: yes
    owner: tg
    group: tg

- name: Fix permissions on files inside .gnupg
  file:
    path: "/home/tg/.gnupg/{{ item | basename }}"
    mode: '0600'
    owner: tg
    group: tg
  with_fileglob:
    - "/home/tg/.gnupg/*"

- name: Instalar pacotes
  vars:
    packages: "{{ lookup('file', 'packages.txt').splitlines() | select('match', '^[^#]') | reject('match', '^$') | list }}"
  package:
    name: "{{ packages }}"
    update_cache: yes
    state: present
  register: apt_result
  retries: 5
  delay: 10
  until: apt_result is succeeded

- name: Adicionar repositório Flathub
  command: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  args:
    creates: /var/lib/flatpak/repo/flathub

- name: Instalar Moonlight via Flatpak
  flatpak:
    name: com.moonlight_stream.Moonlight
    state: present
    remote: flathub

- name: Obter a versão mais recente do lazygit
  shell: |
    curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*'
  register: lazygit_version

- name: Verificar se o lazygit está instalado
  command: lazygit --version
  register: lazygit_installed_version
  ignore_errors: yes

- name: Comparar versões e decidir se precisa atualizar
  set_fact:
    install_lazygit: "{{ lazygit_installed_version.stdout | version_compare(lazygit_version.stdout, '<') }}"

- name: Baixar tarball do lazygit
  shell: |
    curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_{{ lazygit_version.stdout }}_Linux_x86_64.tar.gz"
  when: install_lazygit
  args:
    creates: lazygit.tar.gz

- name: Extrair lazygit
  shell: |
    tar xf lazygit.tar.gz lazygit
  when: install_lazygit
  args:
    creates: lazygit

- name: Instalar lazygit
  become: yes
  shell: |
    install lazygit /usr/local/bin
  when: install_lazygit

# - name: Check if Go is installed
#   command: go version
#   register: go_installed
#   ignore_errors: yes

# - name: Download Go archive
#   get_url:
#     url: https://storage.googleapis.com/golang/go1.4.linux-amd64.tar.gz
#     dest: /tmp/go.tar.gz
#   when: go_installed.rc != 0  # Proceed only if Go is not installed

# - name: Extract Go to /usr/local
#   unarchive:
#     src: /tmp/go.tar.gz
#     dest: /usr/local
#     remote_src: yes
#   when: go_installed.rc != 0  # Only extract if Go was just downloaded

# - name: Clean up Go archive
#   file:
#     path: /tmp/go.tar.gz
#     state: absent
#   when: go_installed.rc != 0  # Only clean up if Go was downloaded

# - name: Update font cache
#   command: fc-cache -fv

- name: Instalar Snaps
  vars:
    snaps: "{{ lookup('file', 'packages_snaps.txt').splitlines() | select('match', '^[^#]') | reject('match', '^$') | list }}"
  ansible.builtin.command: sudo snap install "{{ item }}"
  become: yes
  loop: "{{ snaps }}"
  register: snap_install_result
  retries: 5
  delay: 10
  until: snap_install_result is succeeded

- name: Join ZeroTier network
  ansible.builtin.command:
    cmd: sudo zerotier-cli join abfd31bd47bb29b7
  become: yes
  when: snap_install_result.results | map(attribute='item') | select('search', 'zerotier') | list | length > 0

- name: Ensure required dependencies are installed
  apt:
    name:
      - git
      - build-essential
      - cmake
      - pkg-config
      - libssl-dev
      - libsdl2-dev
      - libvpx-dev
      - libavcodec-dev
      - libavformat-dev
      - libswscale-dev
      - libfdk-aac-dev
      - libprotobuf-dev
    state: present
    update_cache: yes

- name: Clone the Sunshine repository
  git:
    repo: 'https://github.com/LizardByte/Sunshine.git'
    dest: '/opt/sunshine'
    version: 'master'
    force: yes

- name: Build Docker container for Sunshine
  shell: |
    cd /opt/sunshine/scripts
    ./build-container.sh -f Dockerfile-{{ ansible_distribution | lower }}
  args:
    creates: "/opt/sunshine/scripts/Dockerfile-{{ ansible_distribution | lower }}"

- name: Build the Sunshine package inside the Docker container
  shell: |
    cd /opt/sunshine/scripts
    docker run --rm -v /opt/sunshine:/sunshine sunshine-build /bin/bash -c 'cd /sunshine && ./build-sunshine -p -s ..'
  args:
    creates: "/opt/sunshine/sunshine-build/sunshine.deb"

- name: Install the resulting .deb package
  apt:
    deb: "/opt/sunshine/sunshine-build/sunshine.deb"
    state: present

- name: Clean up the Docker container
  shell: |
    /opt/sunshine/scripts/build-container.sh -c delete
  args:
    removes: "/opt/sunshine/scripts/Dockerfile-{{ ansible_distribution | lower }}"
    when: delete_container is defined and delete_container
