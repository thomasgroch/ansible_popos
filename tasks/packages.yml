---
- name: Adicionar repositório ao apt
  apt_repository:
    repo: ppa:linuxuprising/guake
    state: present

- name: Aguardar até que o bloqueio do APT seja liberado
  shell: while fuser /var/lib/dpkg/lock >/dev/null 2>&1 || fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do sleep 1; done

- name: Fix GPG directory permissions to prevent warnings
  file:
    path: "/home/tg/.gnupg"
    mode: '0700'
    recurse: yes
    owner: tg
    group: tg

- name: Fix permissions on files inside .gnupg
  file:
    path: "/home/tg/.gnupg/{{ item | basename }}"
    mode: '0600'
    owner: tg
    group: tg
  with_fileglob:
    - "/home/tg/.gnupg/*"

- name: Instalar pacotes
  vars:
    packages: "{{ lookup('file', 'packages.txt').splitlines() | select('match', '^[^#]') | reject('match', '^$') | list }}"
  package:
    name: "{{ packages }}"
    update_cache: yes
    state: present
  register: apt_result
  retries: 5
  delay: 10
  until: apt_result is succeeded

- name: Adicionar repositório Flathub
  command: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  args:
    creates: /var/lib/flatpak/repo/flathub

- name: Instalar Moonlight via Flatpak
  flatpak:
    name: com.moonlight_stream.Moonlight
    state: present
    remote: flathub

- name: Obter a versão mais recente do lazygit
  shell: |
    curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*'
  register: lazygit_version

- name: Verificar se o lazygit está instalado
  command: lazygit --version
  register: lazygit_installed_version
  ignore_errors: yes

- name: Determinar se precisa instalar ou atualizar o lazygit
  set_fact:
    install_lazygit: >
      {% if lazygit_installed_version.failed %}
        true
      {% else %}
        {% set installed_version = lazygit_installed_version.stdout.split()[1] | regex_replace('^v', '') %}
        {% if installed_version < lazygit_version.stdout %}
          true
        {% else %}
          false
        {% endif %}
      {% endif %}

- name: Baixar tarball do lazygit
  shell: |
    curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_{{ lazygit_version.stdout }}_Linux_x86_64.tar.gz"
  when: install_lazygit
  args:
    creates: lazygit.tar.gz

- name: Extrair lazygit
  shell: |
    tar xf lazygit.tar.gz lazygit
  when: install_lazygit
  args:
    creates: lazygit

- name: Instalar lazygit
  become: yes
  shell: |
    install lazygit /usr/local/bin
  when: install_lazygit

- name: Check if running in Docker
  stat:
    path: /.dockerenv
  register: dockerenv

- name: Install snapd
  become: yes
  apt:
    name: snapd
    state: present
    update_cache: yes
  when: not dockerenv.stat.exists

- name: Ensure snapd service is running
  become: yes
  systemd:
    name: snapd
    state: started
    enabled: yes
  when: not dockerenv.stat.exists

- name: Instalar Snaps
  vars:
    snaps: "{{ lookup('file', 'packages_snaps.txt').splitlines() | select('match', '^[^#]') | reject('match', '^$') | list }}"
  ansible.builtin.command: snap install "{{ item }}"
  become: yes
  loop: "{{ snaps }}"
  register: snap_install_result
  retries: 5
  delay: 10
  until: snap_install_result is succeeded
  when: not dockerenv.stat.exists

- name: Join ZeroTier network
  ansible.builtin.command:
    cmd: sudo zerotier-cli join abfd31bd47bb29b7
  when: not dockerenv.stat.exists

- name: Verificar status do Sunshine
  ansible.builtin.shell: |
    export XDG_RUNTIME_DIR="/run/user/$(id -u)"
    export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u)/bus"
    systemctl --user is-active sunshine
  become_user: "tg"
  register: sunshine_service_status
  failed_when: sunshine_service_status.rc != 0 and sunshine_service_status.rc != 3
  changed_when: false
  when: not dockerenv.stat.exists

- name: Definir variável se o Sunshine está instalado
  set_fact:
    sunshine_installed: "{{ sunshine_service_status.rc == 0 }}"
  when: not dockerenv.stat.exists

- name: Instalar e configurar Sunshine
  block:
    - name: Baixar o Sunshine AppImage
      become_user: "tg"
      ansible.builtin.get_url:
        url: "https://github.com/LizardByte/Sunshine/releases/latest/download/sunshine.AppImage"
        dest: "~/sunshine.AppImage"
        mode: "0755"

    - name: Configurar permissões e udev rules
      block:
        - name: Configurar regra udev para uinput
          ansible.builtin.copy:
            content: 'KERNEL=="uinput", GROUP="input", MODE="0660", OPTIONS+="static_node=uinput"'
            dest: "/etc/udev/rules.d/85-sunshine.rules"
          
        - name: Reload udev rules e carregar módulo
          ansible.builtin.shell: |
            udevadm control --reload-rules
            udevadm trigger
            modprobe uinput
            
        - name: Configurar permissão KMS Capture
          ansible.builtin.command: "setcap cap_sys_admin+p ~/sunshine.AppImage"
      become: yes

    - name: Configurar serviço systemd
      become_user: "tg"
      block:
        - name: Criar diretório systemd user
          ansible.builtin.file:
            path: "~/.config/systemd/user"
            state: directory
            mode: "0755"

        - name: Criar arquivo de serviço
          ansible.builtin.copy:
            dest: "~/.config/systemd/user/sunshine.service"
            content: |
              [Unit]
              Description=Sunshine self-hosted game stream host for Moonlight
              After=gnome-session-wayland@gnome.target
              StartLimitIntervalSec=500
              StartLimitBurst=5

              [Service]
              ExecStart=/home/tg/sunshine.AppImage
              Restart=on-failure
              RestartSec=5s

              [Install]
              WantedBy=graphical-session.target
            mode: "0644"

        - name: Habilitar e iniciar serviço
          ansible.builtin.shell: |
            export XDG_RUNTIME_DIR="/run/user/$(id -u)"
            export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u)/bus"
            systemctl --user enable sunshine
            systemctl --user start sunshine
  when: not sunshine_installed and not dockerenv.stat.exists

- name: Verificar se o TigerVNC está instalado
  shell: dpkg -l | grep -q tigervnc-standalone-server
  register: vnc_installed
  changed_when: false
  failed_when: false

- name: Verificar se o VNC já está configurado
  stat:
    path: /home/tg/.vnc/xstartup
  register: vnc_xstartup

- name: Configurar VNC se estiver instalado e não configurado
  block:
    - name: Garantir que o diretório .vnc exista
      file:
        path: /home/tg/.vnc
        state: directory
        owner: tg
        group: tg
        mode: '0755'

    - name: Garantir que o arquivo .Xauthority exista
      file:
        path: /home/tg/.Xauthority
        state: touch
        owner: tg
        group: tg

    - name: Garantir que o arquivo .Xresources exista
      file:
        path: /home/tg/.Xresources
        state: touch
        owner: tg
        group: tg

    - name: Criar arquivo xstartup para GNOME
      copy:
        dest: "/home/tg/.vnc/xstartup"
        content: |
          #!/bin/bash
          unset SESSION_MANAGER
          # Keep DBUS session for GNOME functionality
          export XDG_CURRENT_DESKTOP=GNOME
          export XDG_SESSION_TYPE=x11
          exec /usr/bin/gnome-session &
        mode: '0755'

    - name: Ajustar propriedade do arquivo xstartup
      file:
        path: "/home/tg/.vnc/xstartup"
        owner: tg
        group: tg

    - name: Criar diretório .vnc e configurar senha
      shell: |
        mkdir -p /home/tg/.vnc
        echo -n 'asdasd' | vncpasswd -f > /home/tg/.vnc/passwd
        chmod 600 /home/tg/.vnc/passwd
      args:
        executable: /bin/bash
      become_user: tg

    - name: Criar serviço systemd para VNC
      copy:
        dest: /etc/systemd/system/vncserver@.service
        content: |
          [Unit]
          Description=Start TigerVNC server at startup
          After=network.target

          [Service]
          Type=forking
          User=tg
          PAMName=login
          PIDFile=/home/tg/.vnc/%H%i.pid
          ExecStart=/usr/bin/vncserver -geometry 1920x1080 -depth 24 :%i
          ExecStop=/usr/bin/vncserver -kill :%i
          ExecStartPost=/bin/sleep 5

          [Install]
          WantedBy=multi-user.target
        mode: '0644'

    - name: Habilitar e iniciar serviço do VNC
      systemd:
        name: vncserver@1.service
        enabled: yes
        state: started
  when:
    - vnc_installed.rc == 0
    - vnc_xstartup.stat.exists == false
